import React, { useContext, useEffect, useState } from 'react';
import { toast, ToastContainer } from 'react-toastify';
import { generateImage } from '../../api';
// import { useHistory } from 'react-router-dom';
import Header from '../../components/Header';
import AiContext from '../../hooks/AiContext';
import UserInput from '../../components/UserInput';

export default function ImageGenerator() {
  const {
    isLogged, cookies, notify, style, quantity, setQuantity,
  } = useContext(AiContext);
  const [url, setUrl] = useState([]);

  const requestImage = async (prompt) => {
    notify('loading...');
    try {
      const response = await generateImage(cookies.token, prompt, Number(quantity));
      setUrl(response.data?.url);
      toast.dismiss();
    } catch (error) {
      toast.dismiss();
      notify('Something gone wrong');
    }
  };

  useEffect(() => {
    isLogged();
  }, []);
  return (
    <div>
      <Header />
      <div className="image-generator-container">
        <h3 style={{ color: style.color }}>Image Generator</h3>
        <UserInput submitMessage={requestImage} />
        <div>
          <input
            type="range"
            min="1"
            max="4"
            style={{ width: '100%', marginTop: '15px' }}
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
          />
          <p style={{ color: style.color, textAlign: 'center' }}>{`Number of images: ${quantity} `}</p>
        </div>
        <div className="grid text-center" style={{ '--bs-rows': 2, '--bs-columns': 2 }}>
          {
          url && url.map((img) => (
            <img
              src={`data:image/jpeg;base64,${img.b64_json}`}
              alt="generated by IA"
              key={img.b64_json}
              className="g-col-6"
              style={{ margin: '5px', borderRadius: '5px' }}
              value={`data:image/jpeg;base64,${img.b64_json}`}
            />
          ))
          }
        </div>
        <ToastContainer
          position="top-center"
          autoClose={15000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="dark"
        />
      </div>
    </div>
  );
}
